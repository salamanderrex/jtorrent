===================================================================================
==========		this file was created by jtorrent team1 	===========
==========		copyright belongs to UMJI_VE489_2014_TEAM1	===========
==========		Last modified date: 2014_7_9			===========
===================================================================================

#this file is about the communcation rule
#include C_R.h in lib file

date change start with the STX_FLAG EDX_FLAG

1.upload the torrent file
STEP 1:

STX_FLAG
{
"request_type":12,
"parameters":[
{
"torrent_name":"raw_avi.torrent"
},
{
"torrent_SHA":"ccccccccccccccccc"
},
{
"torrent_uploader:"zqu"
},
{
"torrent_size":"100"
},
{
"torrent_port":"4321"
}
]
}
EDX_FLAG

in another word, a condensed and real r_c mode
$~{"request_type":12,"parameters":[{"torrent_name":"raw_avi.torrent"},{"torrent_SHA":"there_is_SHA_CHECK"},{"torrent_uploader":"zqu"},{"torrent_size":100},{"torrent_port":4321}]}~$

STEP2 :
then server response 

STX_FLAG
{
"reponse_type":21,
"parameters":[
{
"torrent_ack":1
},
{
"torrent_id":1
}
]
}
EDX_FLAG	

in condensed mode
$~{"reponse_type":21,"parameters":[{"torrent_name":"raw_avi.torrent"},{"torrent_ack":1},{"torrent_id":1}]}~$

STEP3 :
upload upload the binary stream


2.get the torrent list
client
$~{"request_type":15,"parameters":[]}~$

3. get the peer list
client
$~{"request_type":13,"parameters":[{"torrent_id":1}]}~$


4.get the torrent 

READY_TO_RECEIVE_TORRENT_FROM_SERVER
client 
$~{"request_type":14,"parameters":[{"torrent_id":1}]}~$

server response
$~{"response_tye":41,"parameters":[{"torrent_id":1},{"torrent_SHA":"thisissha","torrent_size":45]}~$

client 
$~{"request_tye":16,"parameters":[{"torrent_id":1},{"torrent_SHA":"thisissha"}]}~$

READY_TO_RECEIVE_TORRENT_FROM_SERVER:16

then server start to send data

later , the torrent store in the vector of local torrents 

5.get peer list

client 

$~{"request_type":13,"parameters":[{"torrent_id":1}]}~$

server  response the corresponding torrent_peer list
$~{"response_type":31,"parameters":[{"torrent_port":1235,"user_ip":"127.0.0.1","user_name":"zhouqingyu"}]}~$



for client, add the peer list into the corresponding torrent in the torrents 


7. downloading avi from other user


handshake phase:

downloader    C_C_REQUEST_SHAK_HAND
$~{"request_type":17,"parameters":[{"torrent_id":1}]}~$

uploader  C_C_REQUEST_SHAKE_HAND_REPLY
$~{"response_type":71,"parameters":[{"torrent_id":1}]}~$

bitfield phase:

bitfield downloader  C_C REQUEST_BTFIELD=18
$~{"request_type":18,"parameters":[{"torrent_id":1},{"p":"10101"}]}~$

NOTICE: in most case , the first parametes in p is empty

bitfeld uploader C_C RESPONSE_BTFIELD=81
$~{"response_type":81,"parameters":[{"torrent_id":1},{"p":"10101"},{"uploading_number":1}]}~$

NOTICE:uploading_number is how many client uploader is servering

//close socket if status is 1
//decision tree start 

Request phase:
the client downloader:
$~{"request_type":19,"parameters":[{"torrent_id":1},{"p_index":1},{"begin":0},{"block_length":4096}]}~$

then client  uploader
$~{"response_type":91,"parameters":[{"torrent_id":1},{"p_index":1},{"begin":0},{"block_length":4096}]}~$


then client downloader request  C_C_REQUESR_REQUEST_1=20
$~{"request_type":20,"parameters":[{"torrent_id":1},{"p_index":1},{"begin":0},{"block_length":4096}]}~$

then uploader response data

after have finish , upload done in the pieces

have phase:

client response HAVE=bitfield=18

$~{"request_type":18,"parameters":[{"torrent_id":1},{"p":"10101"}]}~$











